generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  apiKeys   ApiKey[]
  prompts   Prompt[]
  teams     Team[]    @relation("TeamMembers")
  ownedTeams Team[]   @relation("TeamOwner")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id])
  members     User[]   @relation("TeamMembers")
  prompts     Prompt[]
}

enum PromptCategory {
  General
  CodeGeneration
  ContentCreation
  DataAnalysis
  Translation
  Summarization
  QuestionAnswering
  TaskPlanning
  Roleplay
  SystemDesign
  Debugging
  Testing
  Documentation
  CreativeWriting
  Business
  Education
  Research
}

model Prompt {
  id          String        @id @default(cuid())
  name        String
  content     String
  description String?
  model       String
  tags        String[]
  category    PromptCategory @default(General)
  metrics     Json?
  embedding   Unsupported("vector(1536)")?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId      String?
  team        Team?        @relation(fields: [teamId], references: [id])
  versions    Version[]
  tests       PromptTest[]
}

model Version {
  id          String   @id @default(cuid())
  content     String
  description String?
  model       String
  metrics     Json?
  createdAt   DateTime @default(now())
  promptId    String
  prompt      Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
}

model PromptTest {
  id        String   @id @default(cuid())
  input     Json
  output    String
  metrics   Json?
  createdAt DateTime @default(now())
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
}
